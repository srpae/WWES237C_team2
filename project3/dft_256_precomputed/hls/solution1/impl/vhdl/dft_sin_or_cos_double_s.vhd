-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1.2 (64-bit)
-- Version: 2022.1.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft_sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    do_cos : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of dft_sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv12_3FF : STD_LOGIC_VECTOR (11 downto 0) := "001111111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ref_4oPi_table_256_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_sin_cos_K3_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K3_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K3_V_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_sin_cos_K4_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K4_V_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K4_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal do_cos_read_reg_1477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal do_cos_read_reg_1477_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal do_cos_read_reg_1477_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_reg_1484_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_V_fu_316_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_V_reg_1490_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal closepath_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1497_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_336_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_12_reg_1504 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_12_reg_1504_pp0_iter1_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_12_reg_1504_pp0_iter2_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln628_fu_369_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_reg_1514 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln628_reg_1514_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1019_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_1_reg_1519_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal table_256_V_reg_1525 : STD_LOGIC_VECTOR (255 downto 0);
    signal Med_V_reg_1530 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_408_p2 : STD_LOGIC_VECTOR (169 downto 0);
    signal ret_V_5_reg_1540 : STD_LOGIC_VECTOR (169 downto 0);
    signal Mx_bits_V_reg_1545 : STD_LOGIC_VECTOR (123 downto 0);
    signal k_V_reg_1551 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_V_reg_1551_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_bits_V_3_fu_456_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_bits_V_3_reg_1556 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_zeros_fu_511_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Mx_zeros_reg_1561 : STD_LOGIC_VECTOR (6 downto 0);
    signal Mx_V_reg_1567 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter10_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter11_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter12_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter13_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter14_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter15_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter16_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter17_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter18_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter19_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter20_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter21_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_reg_1567_pp0_iter22_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal Ex_V_3_fu_554_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter11_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter12_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter14_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter18_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter19_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter20_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter21_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter22_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter23_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter24_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter25_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter26_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter27_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter28_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter29_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_3_reg_1574_pp0_iter30_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_reg_1580 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_568_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1586 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1586_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1586_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1586_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1586_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1591_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_reg_1597_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_2_reg_1603_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_reg_1610 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_reg_1610_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_reg_1610_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_reg_1610_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_3_reg_1610_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1615 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_1615_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_1615_pp0_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_reg_1615_pp0_iter13_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal B_V_fu_767_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1620 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1620_pp0_iter11_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1620_pp0_iter12_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1620_pp0_iter13_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1620_pp0_iter14_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_V_reg_1620_pp0_iter15_reg : STD_LOGIC_VECTOR (55 downto 0);
    signal B_trunc_reg_1625 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln1271_fu_781_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1630 : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1630_pp0_iter12_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1630_pp0_iter13_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1630_pp0_iter14_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln1271_reg_1630_pp0_iter15_reg : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln541_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1637 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1637_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1637_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1637_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_reg_1637_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln300_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1654_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_4_reg_1660_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal B_squared_V_reg_1665 : STD_LOGIC_VECTOR (48 downto 0);
    signal fourth_order_double_sin_cos_K1_V_load_reg_1671 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_sin_cos_K2_V_load_reg_1676 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln818_fu_839_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal fourth_order_double_sin_cos_K0_V_load_reg_1723 : STD_LOGIC_VECTOR (58 downto 0);
    signal rhs_1_reg_1728 : STD_LOGIC_VECTOR (55 downto 0);
    signal rhs_2_reg_1733 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1_reg_1738 : STD_LOGIC_VECTOR (41 downto 0);
    signal fourth_order_double_sin_cos_K3_V_load_reg_1743 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln1270_1_reg_1748 : STD_LOGIC_VECTOR (34 downto 0);
    signal fourth_order_double_sin_cos_K4_V_load_reg_1753 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_7_fu_964_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_7_reg_1778 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_7_reg_1778_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_4_reg_1783 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln2_reg_1788 : STD_LOGIC_VECTOR (36 downto 0);
    signal Mx_V_2_fu_990_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_2_reg_1793 : STD_LOGIC_VECTOR (62 downto 0);
    signal ret_V_fu_1007_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_reg_1798 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_V_reg_1813 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_41_reg_1819 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_1_reg_1824 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_1_reg_1824_pp0_iter29_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_2_reg_1829 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_31_2_reg_1829_pp0_iter29_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1834 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_1834_pp0_iter29_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_1834_pp0_iter30_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_1092_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1839 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1839_pp0_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_fu_1104_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_reg_1845 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_reg_1845_pp0_iter30_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_reg_1845_pp0_iter31_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln1653_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1653_reg_1851 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1653_reg_1851_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_2_fu_1156_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_2_reg_1856 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln453_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_reg_1861 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_reg_1861_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_fu_1169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln451_reg_1869 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_1_fu_1179_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_1_reg_1874 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_1_reg_1874_pp0_iter31_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln453_1_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_1_reg_1880 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_1_fu_1190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln451_1_reg_1886 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln453_2_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln453_2_reg_1892 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_3_fu_1225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_3_reg_1897 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1454_2_fu_1240_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_2_reg_1902 : STD_LOGIC_VECTOR (62 downto 0);
    signal and_ln453_2_fu_1264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_2_reg_1908 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln453_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln453_reg_1913 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln462_fu_1319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln462_reg_1918 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_exp_V_fu_1355_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_exp_V_reg_1923 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln668_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal data_V_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln214_fu_340_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_fu_346_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_354_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal din_sig_V_fu_326_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln930_fu_379_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_15_fu_382_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_13_fu_397_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_408_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_5_fu_433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1027_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_451_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal tmp_1_fu_463_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal p_Result_14_fu_473_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_2_fu_481_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_15_fu_491_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln1204_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_503_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ex_V_fu_515_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1454_fu_536_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal r_fu_539_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal select_ln482_fu_520_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln841_fu_533_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_V_1_fu_527_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln271_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_17_fu_603_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_610_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_648_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_V_fu_686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1535_fu_716_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1512_fu_719_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_725_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1488_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1488_fu_736_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_fu_740_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_2_fu_745_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_V_16_fu_750_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_784_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_784_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal xor_ln29_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_fu_800_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_sign_V_2_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_784_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_842_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_842_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_847_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_847_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_859_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_871_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_859_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_871_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_847_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_930_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_930_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_942_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal t1_V_fu_917_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln813_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln813_1_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_6_fu_955_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1347_fu_961_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_942_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_930_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal zext_ln1347_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_8_fu_999_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1347_1_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1019_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1019_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Result_9_fu_1075_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_1082_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1488_1_fu_1100_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_9_1_fu_1114_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_1_fu_1128_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_9_2_fu_1121_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_2_fu_1146_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_1_fu_1138_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1488_2_fu_1175_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_6_fu_1208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_34_3_fu_1215_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ex_V_4_fu_1202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1488_3_fu_1237_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal xor_ln453_fu_1250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln453_1_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_2_fu_1245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln453_fu_1255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln453_fu_1269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln453_1_fu_1282_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln186_fu_1233_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln461_fu_1295_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln461_fu_1301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln453_2_fu_1287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_1335_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_1324_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln288_fu_1328_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_exp_V_1_fu_1347_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1488_4_fu_1362_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln1454_3_fu_1365_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_6_fu_1370_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_10_fu_1380_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_11_fu_1396_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_12_fu_1405_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln453_3_fu_1389_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln453_4_fu_1414_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal and_ln300_1_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_1432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln453_5_fu_1421_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln300_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_3_fu_1438_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln300_fu_1450_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal results_sig_V_fu_1457_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_18_fu_1465_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_408_ce : STD_LOGIC;
    signal grp_fu_784_ce : STD_LOGIC;
    signal grp_fu_842_ce : STD_LOGIC;
    signal grp_fu_847_ce : STD_LOGIC;
    signal grp_fu_859_ce : STD_LOGIC;
    signal grp_fu_871_ce : STD_LOGIC;
    signal grp_fu_930_ce : STD_LOGIC;
    signal grp_fu_942_ce : STD_LOGIC;
    signal grp_fu_1019_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to31 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1019_p10 : STD_LOGIC_VECTOR (125 downto 0);
    signal grp_fu_408_p10 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_859_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_871_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_930_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_930_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_942_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_942_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dft_mul_170s_53ns_170_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (169 downto 0) );
    end component;


    component dft_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dft_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dft_mul_49ns_49ns_98_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component dft_mul_56ns_52s_108_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component dft_mul_49ns_44s_93_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component dft_mul_42ns_33ns_75_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component dft_mul_35ns_25ns_60_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component dft_mul_64s_63ns_126_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component dft_sin_or_cos_double_s_ref_4oPi_table_256_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_V_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_V_U : component dft_sin_or_cos_double_s_ref_4oPi_table_256_V_ROM_AUTO_1R
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_V_address0,
        ce0 => ref_4oPi_table_256_V_ce0,
        q0 => ref_4oPi_table_256_V_q0);

    fourth_order_double_sin_cos_K0_V_U : component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K0_V_address0,
        ce0 => fourth_order_double_sin_cos_K0_V_ce0,
        q0 => fourth_order_double_sin_cos_K0_V_q0);

    fourth_order_double_sin_cos_K1_V_U : component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K1_V_address0,
        ce0 => fourth_order_double_sin_cos_K1_V_ce0,
        q0 => fourth_order_double_sin_cos_K1_V_q0);

    fourth_order_double_sin_cos_K2_V_U : component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K2_V_address0,
        ce0 => fourth_order_double_sin_cos_K2_V_ce0,
        q0 => fourth_order_double_sin_cos_K2_V_q0);

    fourth_order_double_sin_cos_K3_V_U : component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K3_V_address0,
        ce0 => fourth_order_double_sin_cos_K3_V_ce0,
        q0 => fourth_order_double_sin_cos_K3_V_q0);

    fourth_order_double_sin_cos_K4_V_U : component dft_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_V_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K4_V_address0,
        ce0 => fourth_order_double_sin_cos_K4_V_ce0,
        q0 => fourth_order_double_sin_cos_K4_V_q0);

    mul_170s_53ns_170_5_1_U1 : component dft_mul_170s_53ns_170_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 170)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Med_V_reg_1530,
        din1 => grp_fu_408_p1,
        ce => grp_fu_408_ce,
        dout => grp_fu_408_p2);

    mux_83_1_1_1_U2 : component dft_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => k_V_1_fu_527_p3,
        dout => tmp_3_fu_568_p10);

    mux_164_1_1_1_U3 : component dft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_17_fu_603_p3,
        dout => tmp_9_fu_610_p18);

    mux_164_1_1_1_U4 : component dft_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_17_fu_603_p3,
        dout => tmp_2_fu_648_p18);

    mul_49ns_49ns_98_5_1_U5 : component dft_mul_49ns_49ns_98_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_784_p0,
        din1 => grp_fu_784_p1,
        ce => grp_fu_784_ce,
        dout => grp_fu_784_p2);

    mul_49ns_49ns_98_5_1_U6 : component dft_mul_49ns_49ns_98_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_842_p0,
        din1 => grp_fu_842_p1,
        ce => grp_fu_842_ce,
        dout => grp_fu_842_p2);

    mul_49ns_49ns_98_5_1_U7 : component dft_mul_49ns_49ns_98_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_847_p0,
        din1 => grp_fu_847_p1,
        ce => grp_fu_847_ce,
        dout => grp_fu_847_p2);

    mul_56ns_52s_108_5_1_U8 : component dft_mul_56ns_52s_108_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 56,
        din1_WIDTH => 52,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_859_p0,
        din1 => fourth_order_double_sin_cos_K1_V_load_reg_1671,
        ce => grp_fu_859_ce,
        dout => grp_fu_859_p2);

    mul_49ns_44s_93_5_1_U9 : component dft_mul_49ns_44s_93_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_871_p0,
        din1 => fourth_order_double_sin_cos_K2_V_load_reg_1676,
        ce => grp_fu_871_ce,
        dout => grp_fu_871_p2);

    mul_42ns_33ns_75_2_1_U10 : component dft_mul_42ns_33ns_75_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 42,
        din1_WIDTH => 33,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_930_p0,
        din1 => grp_fu_930_p1,
        ce => grp_fu_930_ce,
        dout => grp_fu_930_p2);

    mul_35ns_25ns_60_2_1_U11 : component dft_mul_35ns_25ns_60_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 35,
        din1_WIDTH => 25,
        dout_WIDTH => 60)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_942_p0,
        din1 => grp_fu_942_p1,
        ce => grp_fu_942_ce,
        dout => grp_fu_942_p2);

    mul_64s_63ns_126_5_1_U12 : component dft_mul_64s_63ns_126_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 63,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_reg_1798,
        din1 => grp_fu_1019_p1,
        ce => grp_fu_1019_ce,
        dout => grp_fu_1019_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                B_V_reg_1620 <= B_V_fu_767_p1;
                B_V_reg_1620_pp0_iter11_reg <= B_V_reg_1620;
                B_V_reg_1620_pp0_iter12_reg <= B_V_reg_1620_pp0_iter11_reg;
                B_V_reg_1620_pp0_iter13_reg <= B_V_reg_1620_pp0_iter12_reg;
                B_V_reg_1620_pp0_iter14_reg <= B_V_reg_1620_pp0_iter13_reg;
                B_V_reg_1620_pp0_iter15_reg <= B_V_reg_1620_pp0_iter14_reg;
                B_squared_V_reg_1665 <= grp_fu_784_p2(97 downto 49);
                B_trunc_reg_1625 <= r_V_16_fu_750_p3(55 downto 7);
                Ex_V_3_reg_1574 <= Ex_V_3_fu_554_p2;
                Ex_V_3_reg_1574_pp0_iter10_reg <= Ex_V_3_reg_1574;
                Ex_V_3_reg_1574_pp0_iter11_reg <= Ex_V_3_reg_1574_pp0_iter10_reg;
                Ex_V_3_reg_1574_pp0_iter12_reg <= Ex_V_3_reg_1574_pp0_iter11_reg;
                Ex_V_3_reg_1574_pp0_iter13_reg <= Ex_V_3_reg_1574_pp0_iter12_reg;
                Ex_V_3_reg_1574_pp0_iter14_reg <= Ex_V_3_reg_1574_pp0_iter13_reg;
                Ex_V_3_reg_1574_pp0_iter15_reg <= Ex_V_3_reg_1574_pp0_iter14_reg;
                Ex_V_3_reg_1574_pp0_iter16_reg <= Ex_V_3_reg_1574_pp0_iter15_reg;
                Ex_V_3_reg_1574_pp0_iter17_reg <= Ex_V_3_reg_1574_pp0_iter16_reg;
                Ex_V_3_reg_1574_pp0_iter18_reg <= Ex_V_3_reg_1574_pp0_iter17_reg;
                Ex_V_3_reg_1574_pp0_iter19_reg <= Ex_V_3_reg_1574_pp0_iter18_reg;
                Ex_V_3_reg_1574_pp0_iter20_reg <= Ex_V_3_reg_1574_pp0_iter19_reg;
                Ex_V_3_reg_1574_pp0_iter21_reg <= Ex_V_3_reg_1574_pp0_iter20_reg;
                Ex_V_3_reg_1574_pp0_iter22_reg <= Ex_V_3_reg_1574_pp0_iter21_reg;
                Ex_V_3_reg_1574_pp0_iter23_reg <= Ex_V_3_reg_1574_pp0_iter22_reg;
                Ex_V_3_reg_1574_pp0_iter24_reg <= Ex_V_3_reg_1574_pp0_iter23_reg;
                Ex_V_3_reg_1574_pp0_iter25_reg <= Ex_V_3_reg_1574_pp0_iter24_reg;
                Ex_V_3_reg_1574_pp0_iter26_reg <= Ex_V_3_reg_1574_pp0_iter25_reg;
                Ex_V_3_reg_1574_pp0_iter27_reg <= Ex_V_3_reg_1574_pp0_iter26_reg;
                Ex_V_3_reg_1574_pp0_iter28_reg <= Ex_V_3_reg_1574_pp0_iter27_reg;
                Ex_V_3_reg_1574_pp0_iter29_reg <= Ex_V_3_reg_1574_pp0_iter28_reg;
                Ex_V_3_reg_1574_pp0_iter30_reg <= Ex_V_3_reg_1574_pp0_iter29_reg;
                Med_V_reg_1530 <= r_V_15_fu_382_p2(255 downto 86);
                Mx_V_2_reg_1793 <= Mx_V_2_fu_990_p3;
                Mx_V_reg_1567 <= r_fu_539_p2(123 downto 61);
                Mx_V_reg_1567_pp0_iter10_reg <= Mx_V_reg_1567;
                Mx_V_reg_1567_pp0_iter11_reg <= Mx_V_reg_1567_pp0_iter10_reg;
                Mx_V_reg_1567_pp0_iter12_reg <= Mx_V_reg_1567_pp0_iter11_reg;
                Mx_V_reg_1567_pp0_iter13_reg <= Mx_V_reg_1567_pp0_iter12_reg;
                Mx_V_reg_1567_pp0_iter14_reg <= Mx_V_reg_1567_pp0_iter13_reg;
                Mx_V_reg_1567_pp0_iter15_reg <= Mx_V_reg_1567_pp0_iter14_reg;
                Mx_V_reg_1567_pp0_iter16_reg <= Mx_V_reg_1567_pp0_iter15_reg;
                Mx_V_reg_1567_pp0_iter17_reg <= Mx_V_reg_1567_pp0_iter16_reg;
                Mx_V_reg_1567_pp0_iter18_reg <= Mx_V_reg_1567_pp0_iter17_reg;
                Mx_V_reg_1567_pp0_iter19_reg <= Mx_V_reg_1567_pp0_iter18_reg;
                Mx_V_reg_1567_pp0_iter20_reg <= Mx_V_reg_1567_pp0_iter19_reg;
                Mx_V_reg_1567_pp0_iter21_reg <= Mx_V_reg_1567_pp0_iter20_reg;
                Mx_V_reg_1567_pp0_iter22_reg <= Mx_V_reg_1567_pp0_iter21_reg;
                Mx_bits_V_3_reg_1556 <= Mx_bits_V_3_fu_456_p3;
                Mx_bits_V_reg_1545 <= grp_fu_408_p2(166 downto 43);
                Mx_zeros_reg_1561 <= Mx_zeros_fu_511_p1;
                add_ln451_1_reg_1886 <= add_ln451_1_fu_1190_p2;
                add_ln451_reg_1869 <= add_ln451_fu_1169_p2;
                and_ln300_reg_1654 <= and_ln300_fu_813_p2;
                and_ln300_reg_1654_pp0_iter15_reg <= and_ln300_reg_1654;
                and_ln300_reg_1654_pp0_iter16_reg <= and_ln300_reg_1654_pp0_iter15_reg;
                and_ln300_reg_1654_pp0_iter17_reg <= and_ln300_reg_1654_pp0_iter16_reg;
                and_ln300_reg_1654_pp0_iter18_reg <= and_ln300_reg_1654_pp0_iter17_reg;
                and_ln300_reg_1654_pp0_iter19_reg <= and_ln300_reg_1654_pp0_iter18_reg;
                and_ln300_reg_1654_pp0_iter20_reg <= and_ln300_reg_1654_pp0_iter19_reg;
                and_ln300_reg_1654_pp0_iter21_reg <= and_ln300_reg_1654_pp0_iter20_reg;
                and_ln300_reg_1654_pp0_iter22_reg <= and_ln300_reg_1654_pp0_iter21_reg;
                and_ln300_reg_1654_pp0_iter23_reg <= and_ln300_reg_1654_pp0_iter22_reg;
                and_ln300_reg_1654_pp0_iter24_reg <= and_ln300_reg_1654_pp0_iter23_reg;
                and_ln300_reg_1654_pp0_iter25_reg <= and_ln300_reg_1654_pp0_iter24_reg;
                and_ln300_reg_1654_pp0_iter26_reg <= and_ln300_reg_1654_pp0_iter25_reg;
                and_ln300_reg_1654_pp0_iter27_reg <= and_ln300_reg_1654_pp0_iter26_reg;
                and_ln300_reg_1654_pp0_iter28_reg <= and_ln300_reg_1654_pp0_iter27_reg;
                and_ln300_reg_1654_pp0_iter29_reg <= and_ln300_reg_1654_pp0_iter28_reg;
                and_ln300_reg_1654_pp0_iter30_reg <= and_ln300_reg_1654_pp0_iter29_reg;
                and_ln300_reg_1654_pp0_iter31_reg <= and_ln300_reg_1654_pp0_iter30_reg;
                and_ln453_2_reg_1908 <= and_ln453_2_fu_1264_p2;
                closepath_reg_1497_pp0_iter2_reg <= closepath_reg_1497_pp0_iter1_reg;
                closepath_reg_1497_pp0_iter3_reg <= closepath_reg_1497_pp0_iter2_reg;
                closepath_reg_1497_pp0_iter4_reg <= closepath_reg_1497_pp0_iter3_reg;
                closepath_reg_1497_pp0_iter5_reg <= closepath_reg_1497_pp0_iter4_reg;
                closepath_reg_1497_pp0_iter6_reg <= closepath_reg_1497_pp0_iter5_reg;
                closepath_reg_1497_pp0_iter7_reg <= closepath_reg_1497_pp0_iter6_reg;
                closepath_reg_1497_pp0_iter8_reg <= closepath_reg_1497_pp0_iter7_reg;
                cos_basis_reg_1591 <= cos_basis_fu_596_p3;
                cos_basis_reg_1591_pp0_iter10_reg <= cos_basis_reg_1591;
                cos_basis_reg_1591_pp0_iter11_reg <= cos_basis_reg_1591_pp0_iter10_reg;
                cos_basis_reg_1591_pp0_iter12_reg <= cos_basis_reg_1591_pp0_iter11_reg;
                cos_basis_reg_1591_pp0_iter13_reg <= cos_basis_reg_1591_pp0_iter12_reg;
                cos_basis_reg_1591_pp0_iter14_reg <= cos_basis_reg_1591_pp0_iter13_reg;
                cos_basis_reg_1591_pp0_iter15_reg <= cos_basis_reg_1591_pp0_iter14_reg;
                cos_basis_reg_1591_pp0_iter16_reg <= cos_basis_reg_1591_pp0_iter15_reg;
                cos_basis_reg_1591_pp0_iter17_reg <= cos_basis_reg_1591_pp0_iter16_reg;
                cos_basis_reg_1591_pp0_iter18_reg <= cos_basis_reg_1591_pp0_iter17_reg;
                cos_basis_reg_1591_pp0_iter19_reg <= cos_basis_reg_1591_pp0_iter18_reg;
                cos_basis_reg_1591_pp0_iter20_reg <= cos_basis_reg_1591_pp0_iter19_reg;
                cos_basis_reg_1591_pp0_iter21_reg <= cos_basis_reg_1591_pp0_iter20_reg;
                cos_basis_reg_1591_pp0_iter22_reg <= cos_basis_reg_1591_pp0_iter21_reg;
                cos_basis_reg_1591_pp0_iter23_reg <= cos_basis_reg_1591_pp0_iter22_reg;
                cos_basis_reg_1591_pp0_iter24_reg <= cos_basis_reg_1591_pp0_iter23_reg;
                cos_basis_reg_1591_pp0_iter25_reg <= cos_basis_reg_1591_pp0_iter24_reg;
                cos_basis_reg_1591_pp0_iter26_reg <= cos_basis_reg_1591_pp0_iter25_reg;
                cos_basis_reg_1591_pp0_iter27_reg <= cos_basis_reg_1591_pp0_iter26_reg;
                cos_basis_reg_1591_pp0_iter28_reg <= cos_basis_reg_1591_pp0_iter27_reg;
                cos_basis_reg_1591_pp0_iter29_reg <= cos_basis_reg_1591_pp0_iter28_reg;
                cos_basis_reg_1591_pp0_iter30_reg <= cos_basis_reg_1591_pp0_iter29_reg;
                din_exp_V_reg_1490_pp0_iter2_reg <= din_exp_V_reg_1490_pp0_iter1_reg;
                din_exp_V_reg_1490_pp0_iter3_reg <= din_exp_V_reg_1490_pp0_iter2_reg;
                din_exp_V_reg_1490_pp0_iter4_reg <= din_exp_V_reg_1490_pp0_iter3_reg;
                din_exp_V_reg_1490_pp0_iter5_reg <= din_exp_V_reg_1490_pp0_iter4_reg;
                din_exp_V_reg_1490_pp0_iter6_reg <= din_exp_V_reg_1490_pp0_iter5_reg;
                din_exp_V_reg_1490_pp0_iter7_reg <= din_exp_V_reg_1490_pp0_iter6_reg;
                din_exp_V_reg_1490_pp0_iter8_reg <= din_exp_V_reg_1490_pp0_iter7_reg;
                do_cos_read_reg_1477_pp0_iter10_reg <= do_cos_read_reg_1477_pp0_iter9_reg;
                do_cos_read_reg_1477_pp0_iter11_reg <= do_cos_read_reg_1477_pp0_iter10_reg;
                do_cos_read_reg_1477_pp0_iter12_reg <= do_cos_read_reg_1477_pp0_iter11_reg;
                do_cos_read_reg_1477_pp0_iter13_reg <= do_cos_read_reg_1477_pp0_iter12_reg;
                do_cos_read_reg_1477_pp0_iter14_reg <= do_cos_read_reg_1477_pp0_iter13_reg;
                do_cos_read_reg_1477_pp0_iter15_reg <= do_cos_read_reg_1477_pp0_iter14_reg;
                do_cos_read_reg_1477_pp0_iter16_reg <= do_cos_read_reg_1477_pp0_iter15_reg;
                do_cos_read_reg_1477_pp0_iter17_reg <= do_cos_read_reg_1477_pp0_iter16_reg;
                do_cos_read_reg_1477_pp0_iter18_reg <= do_cos_read_reg_1477_pp0_iter17_reg;
                do_cos_read_reg_1477_pp0_iter19_reg <= do_cos_read_reg_1477_pp0_iter18_reg;
                do_cos_read_reg_1477_pp0_iter20_reg <= do_cos_read_reg_1477_pp0_iter19_reg;
                do_cos_read_reg_1477_pp0_iter21_reg <= do_cos_read_reg_1477_pp0_iter20_reg;
                do_cos_read_reg_1477_pp0_iter22_reg <= do_cos_read_reg_1477_pp0_iter21_reg;
                do_cos_read_reg_1477_pp0_iter23_reg <= do_cos_read_reg_1477_pp0_iter22_reg;
                do_cos_read_reg_1477_pp0_iter24_reg <= do_cos_read_reg_1477_pp0_iter23_reg;
                do_cos_read_reg_1477_pp0_iter25_reg <= do_cos_read_reg_1477_pp0_iter24_reg;
                do_cos_read_reg_1477_pp0_iter26_reg <= do_cos_read_reg_1477_pp0_iter25_reg;
                do_cos_read_reg_1477_pp0_iter27_reg <= do_cos_read_reg_1477_pp0_iter26_reg;
                do_cos_read_reg_1477_pp0_iter28_reg <= do_cos_read_reg_1477_pp0_iter27_reg;
                do_cos_read_reg_1477_pp0_iter29_reg <= do_cos_read_reg_1477_pp0_iter28_reg;
                do_cos_read_reg_1477_pp0_iter2_reg <= do_cos_read_reg_1477_pp0_iter1_reg;
                do_cos_read_reg_1477_pp0_iter30_reg <= do_cos_read_reg_1477_pp0_iter29_reg;
                do_cos_read_reg_1477_pp0_iter3_reg <= do_cos_read_reg_1477_pp0_iter2_reg;
                do_cos_read_reg_1477_pp0_iter4_reg <= do_cos_read_reg_1477_pp0_iter3_reg;
                do_cos_read_reg_1477_pp0_iter5_reg <= do_cos_read_reg_1477_pp0_iter4_reg;
                do_cos_read_reg_1477_pp0_iter6_reg <= do_cos_read_reg_1477_pp0_iter5_reg;
                do_cos_read_reg_1477_pp0_iter7_reg <= do_cos_read_reg_1477_pp0_iter6_reg;
                do_cos_read_reg_1477_pp0_iter8_reg <= do_cos_read_reg_1477_pp0_iter7_reg;
                do_cos_read_reg_1477_pp0_iter9_reg <= do_cos_read_reg_1477_pp0_iter8_reg;
                fourth_order_double_sin_cos_K0_V_load_reg_1723 <= fourth_order_double_sin_cos_K0_V_q0;
                fourth_order_double_sin_cos_K1_V_load_reg_1671 <= fourth_order_double_sin_cos_K1_V_q0;
                fourth_order_double_sin_cos_K2_V_load_reg_1676 <= fourth_order_double_sin_cos_K2_V_q0;
                fourth_order_double_sin_cos_K3_V_load_reg_1743 <= fourth_order_double_sin_cos_K3_V_q0;
                fourth_order_double_sin_cos_K4_V_load_reg_1753 <= fourth_order_double_sin_cos_K4_V_q0;
                icmp_ln1019_1_reg_1519_pp0_iter10_reg <= icmp_ln1019_1_reg_1519_pp0_iter9_reg;
                icmp_ln1019_1_reg_1519_pp0_iter11_reg <= icmp_ln1019_1_reg_1519_pp0_iter10_reg;
                icmp_ln1019_1_reg_1519_pp0_iter12_reg <= icmp_ln1019_1_reg_1519_pp0_iter11_reg;
                icmp_ln1019_1_reg_1519_pp0_iter13_reg <= icmp_ln1019_1_reg_1519_pp0_iter12_reg;
                icmp_ln1019_1_reg_1519_pp0_iter14_reg <= icmp_ln1019_1_reg_1519_pp0_iter13_reg;
                icmp_ln1019_1_reg_1519_pp0_iter15_reg <= icmp_ln1019_1_reg_1519_pp0_iter14_reg;
                icmp_ln1019_1_reg_1519_pp0_iter16_reg <= icmp_ln1019_1_reg_1519_pp0_iter15_reg;
                icmp_ln1019_1_reg_1519_pp0_iter17_reg <= icmp_ln1019_1_reg_1519_pp0_iter16_reg;
                icmp_ln1019_1_reg_1519_pp0_iter18_reg <= icmp_ln1019_1_reg_1519_pp0_iter17_reg;
                icmp_ln1019_1_reg_1519_pp0_iter19_reg <= icmp_ln1019_1_reg_1519_pp0_iter18_reg;
                icmp_ln1019_1_reg_1519_pp0_iter20_reg <= icmp_ln1019_1_reg_1519_pp0_iter19_reg;
                icmp_ln1019_1_reg_1519_pp0_iter21_reg <= icmp_ln1019_1_reg_1519_pp0_iter20_reg;
                icmp_ln1019_1_reg_1519_pp0_iter22_reg <= icmp_ln1019_1_reg_1519_pp0_iter21_reg;
                icmp_ln1019_1_reg_1519_pp0_iter23_reg <= icmp_ln1019_1_reg_1519_pp0_iter22_reg;
                icmp_ln1019_1_reg_1519_pp0_iter24_reg <= icmp_ln1019_1_reg_1519_pp0_iter23_reg;
                icmp_ln1019_1_reg_1519_pp0_iter25_reg <= icmp_ln1019_1_reg_1519_pp0_iter24_reg;
                icmp_ln1019_1_reg_1519_pp0_iter26_reg <= icmp_ln1019_1_reg_1519_pp0_iter25_reg;
                icmp_ln1019_1_reg_1519_pp0_iter27_reg <= icmp_ln1019_1_reg_1519_pp0_iter26_reg;
                icmp_ln1019_1_reg_1519_pp0_iter28_reg <= icmp_ln1019_1_reg_1519_pp0_iter27_reg;
                icmp_ln1019_1_reg_1519_pp0_iter29_reg <= icmp_ln1019_1_reg_1519_pp0_iter28_reg;
                icmp_ln1019_1_reg_1519_pp0_iter2_reg <= icmp_ln1019_1_reg_1519_pp0_iter1_reg;
                icmp_ln1019_1_reg_1519_pp0_iter30_reg <= icmp_ln1019_1_reg_1519_pp0_iter29_reg;
                icmp_ln1019_1_reg_1519_pp0_iter31_reg <= icmp_ln1019_1_reg_1519_pp0_iter30_reg;
                icmp_ln1019_1_reg_1519_pp0_iter3_reg <= icmp_ln1019_1_reg_1519_pp0_iter2_reg;
                icmp_ln1019_1_reg_1519_pp0_iter4_reg <= icmp_ln1019_1_reg_1519_pp0_iter3_reg;
                icmp_ln1019_1_reg_1519_pp0_iter5_reg <= icmp_ln1019_1_reg_1519_pp0_iter4_reg;
                icmp_ln1019_1_reg_1519_pp0_iter6_reg <= icmp_ln1019_1_reg_1519_pp0_iter5_reg;
                icmp_ln1019_1_reg_1519_pp0_iter7_reg <= icmp_ln1019_1_reg_1519_pp0_iter6_reg;
                icmp_ln1019_1_reg_1519_pp0_iter8_reg <= icmp_ln1019_1_reg_1519_pp0_iter7_reg;
                icmp_ln1019_1_reg_1519_pp0_iter9_reg <= icmp_ln1019_1_reg_1519_pp0_iter8_reg;
                icmp_ln1019_2_reg_1603 <= icmp_ln1019_2_fu_699_p2;
                icmp_ln1019_2_reg_1603_pp0_iter10_reg <= icmp_ln1019_2_reg_1603;
                icmp_ln1019_2_reg_1603_pp0_iter11_reg <= icmp_ln1019_2_reg_1603_pp0_iter10_reg;
                icmp_ln1019_2_reg_1603_pp0_iter12_reg <= icmp_ln1019_2_reg_1603_pp0_iter11_reg;
                icmp_ln1019_2_reg_1603_pp0_iter13_reg <= icmp_ln1019_2_reg_1603_pp0_iter12_reg;
                icmp_ln1019_2_reg_1603_pp0_iter14_reg <= icmp_ln1019_2_reg_1603_pp0_iter13_reg;
                icmp_ln1019_2_reg_1603_pp0_iter15_reg <= icmp_ln1019_2_reg_1603_pp0_iter14_reg;
                icmp_ln1019_2_reg_1603_pp0_iter16_reg <= icmp_ln1019_2_reg_1603_pp0_iter15_reg;
                icmp_ln1019_2_reg_1603_pp0_iter17_reg <= icmp_ln1019_2_reg_1603_pp0_iter16_reg;
                icmp_ln1019_2_reg_1603_pp0_iter18_reg <= icmp_ln1019_2_reg_1603_pp0_iter17_reg;
                icmp_ln1019_2_reg_1603_pp0_iter19_reg <= icmp_ln1019_2_reg_1603_pp0_iter18_reg;
                icmp_ln1019_2_reg_1603_pp0_iter20_reg <= icmp_ln1019_2_reg_1603_pp0_iter19_reg;
                icmp_ln1019_2_reg_1603_pp0_iter21_reg <= icmp_ln1019_2_reg_1603_pp0_iter20_reg;
                icmp_ln1019_2_reg_1603_pp0_iter22_reg <= icmp_ln1019_2_reg_1603_pp0_iter21_reg;
                icmp_ln1019_2_reg_1603_pp0_iter23_reg <= icmp_ln1019_2_reg_1603_pp0_iter22_reg;
                icmp_ln1019_2_reg_1603_pp0_iter24_reg <= icmp_ln1019_2_reg_1603_pp0_iter23_reg;
                icmp_ln1019_2_reg_1603_pp0_iter25_reg <= icmp_ln1019_2_reg_1603_pp0_iter24_reg;
                icmp_ln1019_2_reg_1603_pp0_iter26_reg <= icmp_ln1019_2_reg_1603_pp0_iter25_reg;
                icmp_ln1019_2_reg_1603_pp0_iter27_reg <= icmp_ln1019_2_reg_1603_pp0_iter26_reg;
                icmp_ln1019_2_reg_1603_pp0_iter28_reg <= icmp_ln1019_2_reg_1603_pp0_iter27_reg;
                icmp_ln1019_2_reg_1603_pp0_iter29_reg <= icmp_ln1019_2_reg_1603_pp0_iter28_reg;
                icmp_ln1019_2_reg_1603_pp0_iter30_reg <= icmp_ln1019_2_reg_1603_pp0_iter29_reg;
                icmp_ln1019_2_reg_1603_pp0_iter31_reg <= icmp_ln1019_2_reg_1603_pp0_iter30_reg;
                icmp_ln1019_reg_1597 <= icmp_ln1019_fu_694_p2;
                icmp_ln1019_reg_1597_pp0_iter10_reg <= icmp_ln1019_reg_1597;
                icmp_ln1019_reg_1597_pp0_iter11_reg <= icmp_ln1019_reg_1597_pp0_iter10_reg;
                icmp_ln1019_reg_1597_pp0_iter12_reg <= icmp_ln1019_reg_1597_pp0_iter11_reg;
                icmp_ln1019_reg_1597_pp0_iter13_reg <= icmp_ln1019_reg_1597_pp0_iter12_reg;
                icmp_ln1019_reg_1597_pp0_iter14_reg <= icmp_ln1019_reg_1597_pp0_iter13_reg;
                icmp_ln1019_reg_1597_pp0_iter15_reg <= icmp_ln1019_reg_1597_pp0_iter14_reg;
                icmp_ln1019_reg_1597_pp0_iter16_reg <= icmp_ln1019_reg_1597_pp0_iter15_reg;
                icmp_ln1019_reg_1597_pp0_iter17_reg <= icmp_ln1019_reg_1597_pp0_iter16_reg;
                icmp_ln1019_reg_1597_pp0_iter18_reg <= icmp_ln1019_reg_1597_pp0_iter17_reg;
                icmp_ln1019_reg_1597_pp0_iter19_reg <= icmp_ln1019_reg_1597_pp0_iter18_reg;
                icmp_ln1019_reg_1597_pp0_iter20_reg <= icmp_ln1019_reg_1597_pp0_iter19_reg;
                icmp_ln1019_reg_1597_pp0_iter21_reg <= icmp_ln1019_reg_1597_pp0_iter20_reg;
                icmp_ln1019_reg_1597_pp0_iter22_reg <= icmp_ln1019_reg_1597_pp0_iter21_reg;
                icmp_ln1019_reg_1597_pp0_iter23_reg <= icmp_ln1019_reg_1597_pp0_iter22_reg;
                icmp_ln1019_reg_1597_pp0_iter24_reg <= icmp_ln1019_reg_1597_pp0_iter23_reg;
                icmp_ln1019_reg_1597_pp0_iter25_reg <= icmp_ln1019_reg_1597_pp0_iter24_reg;
                icmp_ln1019_reg_1597_pp0_iter26_reg <= icmp_ln1019_reg_1597_pp0_iter25_reg;
                icmp_ln1019_reg_1597_pp0_iter27_reg <= icmp_ln1019_reg_1597_pp0_iter26_reg;
                icmp_ln1019_reg_1597_pp0_iter28_reg <= icmp_ln1019_reg_1597_pp0_iter27_reg;
                icmp_ln1019_reg_1597_pp0_iter29_reg <= icmp_ln1019_reg_1597_pp0_iter28_reg;
                icmp_ln1019_reg_1597_pp0_iter30_reg <= icmp_ln1019_reg_1597_pp0_iter29_reg;
                icmp_ln1019_reg_1597_pp0_iter31_reg <= icmp_ln1019_reg_1597_pp0_iter30_reg;
                icmp_ln1653_reg_1851 <= icmp_ln1653_fu_1109_p2;
                icmp_ln1653_reg_1851_pp0_iter30_reg <= icmp_ln1653_reg_1851;
                icmp_ln453_1_reg_1880 <= icmp_ln453_1_fu_1184_p2;
                icmp_ln453_2_reg_1892 <= icmp_ln453_2_fu_1196_p2;
                icmp_ln453_reg_1861 <= icmp_ln453_fu_1164_p2;
                icmp_ln453_reg_1861_pp0_iter31_reg <= icmp_ln453_reg_1861;
                isNeg_reg_1580 <= Ex_V_3_fu_554_p2(10 downto 10);
                k_V_reg_1551_pp0_iter8_reg <= k_V_reg_1551;
                or_ln453_reg_1913 <= or_ln453_fu_1276_p2;
                or_ln462_reg_1918 <= or_ln462_fu_1319_p2;
                p_Result_11_reg_1484_pp0_iter10_reg <= p_Result_11_reg_1484_pp0_iter9_reg;
                p_Result_11_reg_1484_pp0_iter11_reg <= p_Result_11_reg_1484_pp0_iter10_reg;
                p_Result_11_reg_1484_pp0_iter12_reg <= p_Result_11_reg_1484_pp0_iter11_reg;
                p_Result_11_reg_1484_pp0_iter13_reg <= p_Result_11_reg_1484_pp0_iter12_reg;
                p_Result_11_reg_1484_pp0_iter2_reg <= p_Result_11_reg_1484_pp0_iter1_reg;
                p_Result_11_reg_1484_pp0_iter3_reg <= p_Result_11_reg_1484_pp0_iter2_reg;
                p_Result_11_reg_1484_pp0_iter4_reg <= p_Result_11_reg_1484_pp0_iter3_reg;
                p_Result_11_reg_1484_pp0_iter5_reg <= p_Result_11_reg_1484_pp0_iter4_reg;
                p_Result_11_reg_1484_pp0_iter6_reg <= p_Result_11_reg_1484_pp0_iter5_reg;
                p_Result_11_reg_1484_pp0_iter7_reg <= p_Result_11_reg_1484_pp0_iter6_reg;
                p_Result_11_reg_1484_pp0_iter8_reg <= p_Result_11_reg_1484_pp0_iter7_reg;
                p_Result_11_reg_1484_pp0_iter9_reg <= p_Result_11_reg_1484_pp0_iter8_reg;
                p_Result_12_reg_1504_pp0_iter2_reg <= p_Result_12_reg_1504_pp0_iter1_reg;
                p_Result_31_1_reg_1824 <= grp_fu_1019_p2(109 downto 94);
                p_Result_31_1_reg_1824_pp0_iter29_reg <= p_Result_31_1_reg_1824;
                p_Result_31_2_reg_1829 <= grp_fu_1019_p2(93 downto 78);
                p_Result_31_2_reg_1829_pp0_iter29_reg <= p_Result_31_2_reg_1829;
                p_Result_s_41_reg_1819 <= grp_fu_1019_p2(125 downto 110);
                result_V_reg_1813 <= grp_fu_1019_p2(125 downto 63);
                results_exp_V_reg_1923 <= results_exp_V_fu_1355_p3;
                results_sign_V_3_reg_1610 <= results_sign_V_3_fu_710_p2;
                results_sign_V_3_reg_1610_pp0_iter10_reg <= results_sign_V_3_reg_1610;
                results_sign_V_3_reg_1610_pp0_iter11_reg <= results_sign_V_3_reg_1610_pp0_iter10_reg;
                results_sign_V_3_reg_1610_pp0_iter12_reg <= results_sign_V_3_reg_1610_pp0_iter11_reg;
                results_sign_V_3_reg_1610_pp0_iter13_reg <= results_sign_V_3_reg_1610_pp0_iter12_reg;
                results_sign_V_4_reg_1660 <= results_sign_V_4_fu_822_p3;
                results_sign_V_4_reg_1660_pp0_iter15_reg <= results_sign_V_4_reg_1660;
                results_sign_V_4_reg_1660_pp0_iter16_reg <= results_sign_V_4_reg_1660_pp0_iter15_reg;
                results_sign_V_4_reg_1660_pp0_iter17_reg <= results_sign_V_4_reg_1660_pp0_iter16_reg;
                results_sign_V_4_reg_1660_pp0_iter18_reg <= results_sign_V_4_reg_1660_pp0_iter17_reg;
                results_sign_V_4_reg_1660_pp0_iter19_reg <= results_sign_V_4_reg_1660_pp0_iter18_reg;
                results_sign_V_4_reg_1660_pp0_iter20_reg <= results_sign_V_4_reg_1660_pp0_iter19_reg;
                results_sign_V_4_reg_1660_pp0_iter21_reg <= results_sign_V_4_reg_1660_pp0_iter20_reg;
                results_sign_V_4_reg_1660_pp0_iter22_reg <= results_sign_V_4_reg_1660_pp0_iter21_reg;
                results_sign_V_4_reg_1660_pp0_iter23_reg <= results_sign_V_4_reg_1660_pp0_iter22_reg;
                results_sign_V_4_reg_1660_pp0_iter24_reg <= results_sign_V_4_reg_1660_pp0_iter23_reg;
                results_sign_V_4_reg_1660_pp0_iter25_reg <= results_sign_V_4_reg_1660_pp0_iter24_reg;
                results_sign_V_4_reg_1660_pp0_iter26_reg <= results_sign_V_4_reg_1660_pp0_iter25_reg;
                results_sign_V_4_reg_1660_pp0_iter27_reg <= results_sign_V_4_reg_1660_pp0_iter26_reg;
                results_sign_V_4_reg_1660_pp0_iter28_reg <= results_sign_V_4_reg_1660_pp0_iter27_reg;
                results_sign_V_4_reg_1660_pp0_iter29_reg <= results_sign_V_4_reg_1660_pp0_iter28_reg;
                results_sign_V_4_reg_1660_pp0_iter30_reg <= results_sign_V_4_reg_1660_pp0_iter29_reg;
                results_sign_V_4_reg_1660_pp0_iter31_reg <= results_sign_V_4_reg_1660_pp0_iter30_reg;
                ret_V_5_reg_1540 <= grp_fu_408_p2;
                ret_V_7_reg_1778 <= ret_V_7_fu_964_p2;
                ret_V_7_reg_1778_pp0_iter22_reg <= ret_V_7_reg_1778;
                ret_V_reg_1798 <= ret_V_fu_1007_p2;
                rhs_1_reg_1728 <= grp_fu_859_p2(107 downto 52);
                rhs_2_reg_1733 <= grp_fu_871_p2(92 downto 45);
                rhs_4_reg_1783 <= grp_fu_942_p2(59 downto 31);
                shl_ln1454_1_reg_1874 <= shl_ln1454_1_fu_1179_p2;
                shl_ln1454_1_reg_1874_pp0_iter31_reg <= shl_ln1454_1_reg_1874;
                shl_ln1454_2_reg_1902 <= shl_ln1454_2_fu_1240_p2;
                shl_ln1454_reg_1845 <= shl_ln1454_fu_1104_p2;
                shl_ln1454_reg_1845_pp0_iter30_reg <= shl_ln1454_reg_1845;
                shl_ln1454_reg_1845_pp0_iter31_reg <= shl_ln1454_reg_1845_pp0_iter30_reg;
                tmp_3_reg_1586 <= tmp_3_fu_568_p10;
                tmp_3_reg_1586_pp0_iter10_reg <= tmp_3_reg_1586;
                tmp_3_reg_1586_pp0_iter11_reg <= tmp_3_reg_1586_pp0_iter10_reg;
                tmp_3_reg_1586_pp0_iter12_reg <= tmp_3_reg_1586_pp0_iter11_reg;
                tmp_3_reg_1586_pp0_iter13_reg <= tmp_3_reg_1586_pp0_iter12_reg;
                tmp_4_reg_1615 <= r_V_16_fu_750_p3(62 downto 56);
                tmp_4_reg_1615_pp0_iter11_reg <= tmp_4_reg_1615;
                tmp_4_reg_1615_pp0_iter12_reg <= tmp_4_reg_1615_pp0_iter11_reg;
                tmp_4_reg_1615_pp0_iter13_reg <= tmp_4_reg_1615_pp0_iter12_reg;
                tmp_7_reg_1834 <= grp_fu_1019_p2(77 downto 63);
                tmp_7_reg_1834_pp0_iter29_reg <= tmp_7_reg_1834;
                tmp_7_reg_1834_pp0_iter30_reg <= tmp_7_reg_1834_pp0_iter29_reg;
                tmp_8_2_reg_1856 <= tmp_8_2_fu_1156_p3;
                tmp_8_3_reg_1897 <= tmp_8_3_fu_1225_p3;
                tmp_8_reg_1839 <= tmp_8_fu_1092_p3;
                tmp_8_reg_1839_pp0_iter30_reg <= tmp_8_reg_1839;
                trunc_ln1270_1_reg_1748 <= grp_fu_847_p2(97 downto 63);
                trunc_ln1_reg_1738 <= grp_fu_842_p2(97 downto 56);
                trunc_ln2_reg_1788 <= grp_fu_930_p2(74 downto 38);
                    zext_ln1271_reg_1630(48 downto 0) <= zext_ln1271_fu_781_p1(48 downto 0);
                    zext_ln1271_reg_1630_pp0_iter12_reg(48 downto 0) <= zext_ln1271_reg_1630(48 downto 0);
                    zext_ln1271_reg_1630_pp0_iter13_reg(48 downto 0) <= zext_ln1271_reg_1630_pp0_iter12_reg(48 downto 0);
                    zext_ln1271_reg_1630_pp0_iter14_reg(48 downto 0) <= zext_ln1271_reg_1630_pp0_iter13_reg(48 downto 0);
                    zext_ln1271_reg_1630_pp0_iter15_reg(48 downto 0) <= zext_ln1271_reg_1630_pp0_iter14_reg(48 downto 0);
                    zext_ln541_reg_1637(7 downto 0) <= zext_ln541_fu_807_p1(7 downto 0);
                    zext_ln541_reg_1637_pp0_iter15_reg(7 downto 0) <= zext_ln541_reg_1637(7 downto 0);
                    zext_ln541_reg_1637_pp0_iter16_reg(7 downto 0) <= zext_ln541_reg_1637_pp0_iter15_reg(7 downto 0);
                    zext_ln541_reg_1637_pp0_iter17_reg(7 downto 0) <= zext_ln541_reg_1637_pp0_iter16_reg(7 downto 0);
                    zext_ln541_reg_1637_pp0_iter18_reg(7 downto 0) <= zext_ln541_reg_1637_pp0_iter17_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                closepath_reg_1497 <= closepath_fu_330_p2;
                closepath_reg_1497_pp0_iter1_reg <= closepath_reg_1497;
                din_exp_V_reg_1490 <= data_V_fu_304_p1(62 downto 52);
                din_exp_V_reg_1490_pp0_iter1_reg <= din_exp_V_reg_1490;
                do_cos_read_reg_1477 <= do_cos;
                do_cos_read_reg_1477_pp0_iter1_reg <= do_cos_read_reg_1477;
                icmp_ln1019_1_reg_1519 <= icmp_ln1019_1_fu_373_p2;
                icmp_ln1019_1_reg_1519_pp0_iter1_reg <= icmp_ln1019_1_reg_1519;
                p_Result_11_reg_1484 <= data_V_fu_304_p1(63 downto 63);
                p_Result_11_reg_1484_pp0_iter1_reg <= p_Result_11_reg_1484;
                p_Result_12_reg_1504 <= p_Result_12_fu_336_p1;
                p_Result_12_reg_1504_pp0_iter1_reg <= p_Result_12_reg_1504;
                table_256_V_reg_1525 <= ref_4oPi_table_256_V_q0;
                trunc_ln628_reg_1514 <= trunc_ln628_fu_369_p1;
                trunc_ln628_reg_1514_pp0_iter1_reg <= trunc_ln628_reg_1514;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_1497_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                k_V_reg_1551 <= grp_fu_408_p2(169 downto 167);
            end if;
        end if;
    end process;
    zext_ln1271_reg_1630(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1630_pp0_iter12_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1630_pp0_iter13_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1630_pp0_iter14_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln1271_reg_1630_pp0_iter15_reg(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1637(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1637_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1637_pp0_iter16_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1637_pp0_iter17_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln541_reg_1637_pp0_iter18_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    B_V_fu_767_p1 <= r_V_16_fu_750_p3(56 - 1 downto 0);
    Ex_V_3_fu_554_p2 <= std_logic_vector(unsigned(select_ln482_fu_520_p3) - unsigned(zext_ln841_fu_533_p1));
    Ex_V_4_fu_1202_p3 <= 
        ap_const_lv11_0 when (cos_basis_reg_1591_pp0_iter30_reg(0) = '1') else 
        Ex_V_3_reg_1574_pp0_iter30_reg;
    Ex_V_fu_515_p2 <= std_logic_vector(unsigned(din_exp_V_reg_1490_pp0_iter8_reg) + unsigned(ap_const_lv11_403));
    Mx_V_2_fu_990_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_reg_1591_pp0_iter22_reg(0) = '1') else 
        Mx_V_reg_1567_pp0_iter22_reg;
    Mx_bits_V_1_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(Mx_bits_V_reg_1545));
    Mx_bits_V_3_fu_456_p3 <= 
        Mx_bits_V_1_fu_451_p2 when (p_Result_s_fu_445_p2(0) = '1') else 
        Mx_bits_V_reg_1545;
    Mx_zeros_fu_511_p1 <= tmp_s_fu_503_p3(7 - 1 downto 0);
    add_ln214_fu_340_p2 <= std_logic_vector(unsigned(din_exp_V_fu_316_p4) + unsigned(ap_const_lv11_44D));
    add_ln451_1_fu_1190_p2 <= std_logic_vector(unsigned(tmp_8_2_fu_1156_p3) + unsigned(add_ln451_fu_1169_p2));
    add_ln451_2_fu_1245_p2 <= std_logic_vector(unsigned(tmp_8_3_fu_1225_p3) + unsigned(add_ln451_1_reg_1886));
    add_ln451_fu_1169_p2 <= std_logic_vector(unsigned(tmp_8_1_fu_1138_p3) + unsigned(ap_const_lv32_10));
    add_ln461_fu_1295_p2 <= std_logic_vector(signed(sext_ln186_fu_1233_p1) + signed(ap_const_lv12_3FF));
    addr_fu_346_p3 <= 
        ap_const_lv11_4A when (closepath_fu_330_p2(0) = '1') else 
        add_ln214_fu_340_p2;
    and_ln300_1_fu_1428_p2 <= (icmp_ln1019_reg_1597_pp0_iter31_reg and icmp_ln1019_1_reg_1519_pp0_iter31_reg);
    and_ln300_fu_813_p2 <= (icmp_ln1019_reg_1597_pp0_iter13_reg and icmp_ln1019_1_reg_1519_pp0_iter13_reg);
    and_ln453_1_fu_1260_p2 <= (icmp_ln453_2_reg_1892 and icmp_ln453_1_reg_1880);
    and_ln453_2_fu_1264_p2 <= (icmp_ln453_reg_1861 and and_ln453_1_fu_1260_p2);
    and_ln453_fu_1255_p2 <= (xor_ln453_fu_1250_p2 and icmp_ln453_reg_1861);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter32, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to31_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to31 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to31)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to31 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_18_fu_1465_p4;
    closepath_fu_330_p2 <= "1" when (unsigned(din_exp_V_fu_316_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    cos_basis_fu_596_p3 <= 
        xor_ln271_fu_590_p2 when (do_cos_read_reg_1477_pp0_iter8_reg(0) = '1') else 
        tmp_3_fu_568_p10;
    data_V_fu_304_p1 <= t_in;
    din_exp_V_fu_316_p4 <= data_V_fu_304_p1(62 downto 52);
    din_sig_V_fu_326_p1 <= data_V_fu_304_p1(52 - 1 downto 0);
    empty_fu_1324_p1 <= newexp_fu_1305_p2(11 - 1 downto 0);
    fourth_order_double_sin_cos_K0_V_address0 <= zext_ln541_reg_1637_pp0_iter18_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K0_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K1_V_address0 <= zext_ln541_fu_807_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K1_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K2_V_address0 <= zext_ln541_fu_807_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K2_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K3_V_address0 <= zext_ln541_reg_1637_pp0_iter18_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K3_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K3_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K4_V_address0 <= zext_ln541_reg_1637_pp0_iter18_reg(8 - 1 downto 0);

    fourth_order_double_sin_cos_K4_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fourth_order_double_sin_cos_K4_V_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1019_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1019_ce <= ap_const_logic_1;
        else 
            grp_fu_1019_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1019_p1 <= grp_fu_1019_p10(63 - 1 downto 0);
    grp_fu_1019_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_2_reg_1793),126));

    grp_fu_408_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_408_ce <= ap_const_logic_1;
        else 
            grp_fu_408_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_408_p1 <= grp_fu_408_p10(53 - 1 downto 0);
    grp_fu_408_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_13_fu_397_p3),170));

    grp_fu_784_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_784_ce <= ap_const_logic_1;
        else 
            grp_fu_784_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_784_p0 <= zext_ln1271_fu_781_p1(49 - 1 downto 0);
    grp_fu_784_p1 <= zext_ln1271_fu_781_p1(49 - 1 downto 0);

    grp_fu_842_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_842_ce <= ap_const_logic_1;
        else 
            grp_fu_842_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_842_p0 <= zext_ln818_fu_839_p1(49 - 1 downto 0);
    grp_fu_842_p1 <= zext_ln1271_reg_1630_pp0_iter15_reg(49 - 1 downto 0);

    grp_fu_847_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_847_ce <= ap_const_logic_1;
        else 
            grp_fu_847_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_847_p0 <= zext_ln818_fu_839_p1(49 - 1 downto 0);
    grp_fu_847_p1 <= zext_ln818_fu_839_p1(49 - 1 downto 0);

    grp_fu_859_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_859_ce <= ap_const_logic_1;
        else 
            grp_fu_859_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_859_p0 <= grp_fu_859_p00(56 - 1 downto 0);
    grp_fu_859_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1620_pp0_iter15_reg),108));

    grp_fu_871_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_871_ce <= ap_const_logic_1;
        else 
            grp_fu_871_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_871_p0 <= grp_fu_871_p00(49 - 1 downto 0);
    grp_fu_871_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1665),93));

    grp_fu_930_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_930_ce <= ap_const_logic_1;
        else 
            grp_fu_930_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_930_p0 <= grp_fu_930_p00(42 - 1 downto 0);
    grp_fu_930_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_reg_1738),75));
    grp_fu_930_p1 <= grp_fu_930_p10(33 - 1 downto 0);
    grp_fu_930_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K3_V_load_reg_1743),75));

    grp_fu_942_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_942_ce <= ap_const_logic_1;
        else 
            grp_fu_942_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_942_p0 <= grp_fu_942_p00(35 - 1 downto 0);
    grp_fu_942_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1270_1_reg_1748),60));
    grp_fu_942_p1 <= grp_fu_942_p10(25 - 1 downto 0);
    grp_fu_942_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K4_V_load_reg_1753),60));
    icmp_ln1019_1_fu_373_p2 <= "1" when (din_sig_V_fu_326_p1 = ap_const_lv52_0) else "0";
    icmp_ln1019_2_fu_699_p2 <= "1" when (din_exp_V_reg_1490_pp0_iter8_reg = ap_const_lv11_7FF) else "0";
    icmp_ln1019_fu_694_p2 <= "1" when (din_exp_V_reg_1490_pp0_iter8_reg = ap_const_lv11_0) else "0";
    icmp_ln1653_fu_1109_p2 <= "1" when (result_V_reg_1813 = ap_const_lv63_0) else "0";
    icmp_ln453_1_fu_1184_p2 <= "1" when (tmp_8_1_fu_1138_p3 = ap_const_lv32_10) else "0";
    icmp_ln453_2_fu_1196_p2 <= "1" when (tmp_8_2_fu_1156_p3 = ap_const_lv32_10) else "0";
    icmp_ln453_fu_1164_p2 <= "1" when (tmp_8_reg_1839 = ap_const_lv32_10) else "0";
    k_V_1_fu_527_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1497_pp0_iter8_reg(0) = '1') else 
        k_V_reg_1551_pp0_iter8_reg;
    newexp_fu_1305_p2 <= std_logic_vector(signed(sext_ln461_fu_1301_p1) - signed(select_ln453_2_fu_1287_p3));
    or_ln300_fu_1446_p2 <= (icmp_ln1019_2_reg_1603_pp0_iter31_reg or and_ln300_reg_1654_pp0_iter31_reg);
    or_ln311_fu_1342_p2 <= (or_ln462_fu_1319_p2 or icmp_ln1019_2_reg_1603_pp0_iter30_reg);
    or_ln453_fu_1276_p2 <= (and_ln453_fu_1255_p2 or and_ln453_2_fu_1264_p2);
    or_ln462_fu_1319_p2 <= (tmp_14_fu_1311_p3 or icmp_ln1653_reg_1851_pp0_iter30_reg);
    p_Result_12_fu_336_p1 <= data_V_fu_304_p1(52 - 1 downto 0);
    p_Result_13_fu_397_p3 <= (ap_const_lv1_1 & p_Result_12_reg_1504_pp0_iter2_reg);
    p_Result_14_fu_473_p3 <= (tmp_1_fu_463_p4 & ap_const_lv1_1);
    p_Result_15_fu_491_p3 <= (ap_const_lv1_1 & p_Result_2_fu_481_p4);
    p_Result_16_fu_800_p3 <= (sin_basis_fu_795_p2 & tmp_4_reg_1615_pp0_iter13_reg);
    p_Result_17_fu_603_p3 <= (p_Result_11_reg_1484_pp0_iter8_reg & k_V_1_fu_527_p3);
    p_Result_18_fu_1465_p4 <= ((results_sign_V_4_reg_1660_pp0_iter31_reg & results_exp_V_reg_1923) & results_sig_V_fu_1457_p3);
    
    p_Result_1_fu_1082_p4_proc : process(p_Result_9_fu_1075_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_1_fu_1082_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_9_fu_1075_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_1_fu_1082_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_1_fu_1082_p4_i) := p_Result_9_fu_1075_p3(32-1-p_Result_1_fu_1082_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_1_fu_1082_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_2_fu_481_p4_proc : process(p_Result_14_fu_473_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_2_fu_481_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_14_fu_473_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_2_fu_481_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_2_fu_481_p4_i) := p_Result_14_fu_473_p3(62-1-p_Result_2_fu_481_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_2_fu_481_p4 <= resvalue(62-1 downto 0);
    end process;

    
    p_Result_34_1_fu_1128_p4_proc : process(p_Result_9_1_fu_1114_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_1_fu_1128_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_9_1_fu_1114_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_1_fu_1128_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_1_fu_1128_p4_i) := p_Result_9_1_fu_1114_p3(32-1-p_Result_34_1_fu_1128_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_1_fu_1128_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_34_2_fu_1146_p4_proc : process(p_Result_9_2_fu_1121_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_2_fu_1146_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_9_2_fu_1121_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_2_fu_1146_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_2_fu_1146_p4_i) := p_Result_9_2_fu_1121_p3(32-1-p_Result_34_2_fu_1146_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_2_fu_1146_p4 <= resvalue(32-1 downto 0);
    end process;

    
    p_Result_34_3_fu_1215_p4_proc : process(p_Result_6_fu_1208_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_3_fu_1215_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_6_fu_1208_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_3_fu_1215_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_3_fu_1215_p4_i) := p_Result_6_fu_1208_p3(32-1-p_Result_34_3_fu_1215_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_3_fu_1215_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_6_fu_1208_p3 <= (tmp_7_reg_1834_pp0_iter30_reg & ap_const_lv17_10000);
    p_Result_9_1_fu_1114_p3 <= (p_Result_31_1_reg_1824_pp0_iter29_reg & ap_const_lv16_8000);
    p_Result_9_2_fu_1121_p3 <= (p_Result_31_2_reg_1829_pp0_iter29_reg & ap_const_lv16_8000);
    p_Result_9_fu_1075_p3 <= (p_Result_s_41_reg_1819 & ap_const_lv16_8000);
    p_Result_s_fu_445_p2 <= (xor_ln1027_fu_440_p2 and tmp_5_fu_433_p3);
    r_V_15_fu_382_p2 <= std_logic_vector(shift_left(unsigned(table_256_V_reg_1525),to_integer(unsigned('0' & zext_ln930_fu_379_p1(31-1 downto 0)))));
    r_V_16_fu_750_p3 <= 
        r_V_fu_740_p2 when (isNeg_reg_1580(0) = '1') else 
        r_V_2_fu_745_p2;
    r_V_2_fu_745_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_1567),to_integer(unsigned('0' & zext_ln1488_fu_736_p1(31-1 downto 0)))));
    r_V_fu_740_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1567),to_integer(unsigned('0' & zext_ln1488_fu_736_p1(31-1 downto 0)))));
    r_fu_539_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_V_3_reg_1556),to_integer(unsigned('0' & zext_ln1454_fu_536_p1(31-1 downto 0)))));
    ref_4oPi_table_256_V_address0 <= zext_ln668_fu_364_p1(4 - 1 downto 0);

    ref_4oPi_table_256_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_V_1_fu_1347_p3 <= 
        select_ln311_fu_1335_p3 when (or_ln311_fu_1342_p2(0) = '1') else 
        empty_fu_1324_p1;
    results_exp_V_fu_1355_p3 <= 
        select_ln288_fu_1328_p3 when (and_ln300_reg_1654_pp0_iter30_reg(0) = '1') else 
        results_exp_V_1_fu_1347_p3;
    results_sig_V_fu_1457_p3 <= 
        select_ln300_3_fu_1438_p3 when (or_ln300_fu_1446_p2(0) = '1') else 
        select_ln300_fu_1450_p3;
    results_sign_V_2_fu_817_p2 <= (xor_ln29_fu_790_p2 and p_Result_11_reg_1484_pp0_iter13_reg);
    results_sign_V_3_fu_710_p2 <= (xor_ln311_fu_704_p2 and results_sign_V_fu_686_p3);
    results_sign_V_4_fu_822_p3 <= 
        results_sign_V_2_fu_817_p2 when (and_ln300_fu_813_p2(0) = '1') else 
        results_sign_V_3_reg_1610_pp0_iter13_reg;
    results_sign_V_fu_686_p3 <= 
        tmp_9_fu_610_p18 when (cos_basis_fu_596_p3(0) = '1') else 
        tmp_2_fu_648_p18;
    ret_V_6_fu_955_p2 <= std_logic_vector(signed(sext_ln813_fu_948_p1) + signed(sext_ln813_1_fu_952_p1));
    ret_V_7_fu_964_p2 <= std_logic_vector(unsigned(ret_V_6_fu_955_p2) + unsigned(sext_ln1347_fu_961_p1));
    ret_V_8_fu_999_p2 <= std_logic_vector(unsigned(ret_V_7_reg_1778_pp0_iter22_reg) + unsigned(zext_ln1347_fu_996_p1));
    ret_V_fu_1007_p2 <= std_logic_vector(unsigned(ret_V_8_fu_999_p2) + unsigned(zext_ln1347_1_fu_1004_p1));
    select_ln288_fu_1328_p3 <= 
        ap_const_lv11_3FF when (do_cos_read_reg_1477_pp0_iter30_reg(0) = '1') else 
        ap_const_lv11_0;
    select_ln300_3_fu_1438_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (xor_ln300_fu_1432_p2(0) = '1') else 
        ap_const_lv52_0;
    select_ln300_fu_1450_p3 <= 
        ap_const_lv52_0 when (or_ln462_reg_1918(0) = '1') else 
        select_ln453_5_fu_1421_p3;
    select_ln311_fu_1335_p3 <= 
        ap_const_lv11_7FF when (icmp_ln1019_2_reg_1603_pp0_iter30_reg(0) = '1') else 
        ap_const_lv11_0;
    select_ln453_1_fu_1282_p3 <= 
        add_ln451_1_reg_1886 when (icmp_ln453_reg_1861(0) = '1') else 
        tmp_8_reg_1839_pp0_iter30_reg;
    select_ln453_2_fu_1287_p3 <= 
        select_ln453_fu_1269_p3 when (or_ln453_fu_1276_p2(0) = '1') else 
        select_ln453_1_fu_1282_p3;
    select_ln453_3_fu_1389_p3 <= 
        tmp_6_fu_1370_p4 when (and_ln453_2_reg_1908(0) = '1') else 
        tmp_10_fu_1380_p4;
    select_ln453_4_fu_1414_p3 <= 
        tmp_11_fu_1396_p4 when (icmp_ln453_reg_1861_pp0_iter31_reg(0) = '1') else 
        tmp_12_fu_1405_p4;
    select_ln453_5_fu_1421_p3 <= 
        select_ln453_3_fu_1389_p3 when (or_ln453_reg_1913(0) = '1') else 
        select_ln453_4_fu_1414_p3;
    select_ln453_fu_1269_p3 <= 
        add_ln451_2_fu_1245_p2 when (and_ln453_2_fu_1264_p2(0) = '1') else 
        add_ln451_reg_1869;
    select_ln482_fu_520_p3 <= 
        Ex_V_fu_515_p2 when (closepath_reg_1497_pp0_iter8_reg(0) = '1') else 
        ap_const_lv11_0;
        sext_ln1204_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_15_fu_491_p3),64));

        sext_ln1347_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_2_reg_1733),64));

        sext_ln1488_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_725_p3),32));

        sext_ln1535_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_3_reg_1574),12));

        sext_ln186_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_4_fu_1202_p3),12));

        sext_ln461_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln461_fu_1295_p2),32));

        sext_ln813_1_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1_reg_1728),64));

        sext_ln813_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_fu_917_p3),64));

    shl_ln1454_1_fu_1179_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1454_reg_1845),to_integer(unsigned('0' & zext_ln1488_2_fu_1175_p1(31-1 downto 0)))));
    shl_ln1454_2_fu_1240_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1454_1_reg_1874),to_integer(unsigned('0' & zext_ln1488_3_fu_1237_p1(31-1 downto 0)))));
    shl_ln1454_3_fu_1365_p2 <= std_logic_vector(shift_left(unsigned(shl_ln1454_2_reg_1902),to_integer(unsigned('0' & zext_ln1488_4_fu_1362_p1(31-1 downto 0)))));
    shl_ln1454_fu_1104_p2 <= std_logic_vector(shift_left(unsigned(result_V_reg_1813),to_integer(unsigned('0' & zext_ln1488_1_fu_1100_p1(31-1 downto 0)))));
    sin_basis_fu_795_p2 <= (xor_ln29_fu_790_p2 xor tmp_3_reg_1586_pp0_iter13_reg);
    sub_ln1512_fu_719_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln1535_fu_716_p1));
    t1_V_fu_917_p3 <= (fourth_order_double_sin_cos_K0_V_load_reg_1723 & ap_const_lv4_0);
    tmp_10_fu_1380_p4 <= shl_ln1454_1_reg_1874_pp0_iter31_reg(61 downto 10);
    tmp_11_fu_1396_p4 <= shl_ln1454_2_reg_1902(61 downto 10);
    tmp_12_fu_1405_p4 <= shl_ln1454_reg_1845_pp0_iter31_reg(61 downto 10);
    tmp_14_fu_1311_p3 <= newexp_fu_1305_p2(31 downto 31);
    tmp_1_fu_463_p4 <= Mx_bits_V_3_fu_456_p3(123 downto 63);
    tmp_5_fu_433_p3 <= ret_V_5_reg_1540(167 downto 167);
    tmp_6_fu_1370_p4 <= shl_ln1454_3_fu_1365_p2(61 downto 10);
    
    tmp_8_1_fu_1138_p3_proc : process(p_Result_34_1_fu_1128_p4)
    begin
        tmp_8_1_fu_1138_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_1_fu_1128_p4(i) = '1' then
                tmp_8_1_fu_1138_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_8_2_fu_1156_p3_proc : process(p_Result_34_2_fu_1146_p4)
    begin
        tmp_8_2_fu_1156_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_2_fu_1146_p4(i) = '1' then
                tmp_8_2_fu_1156_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_8_3_fu_1225_p3_proc : process(p_Result_34_3_fu_1215_p4)
    begin
        tmp_8_3_fu_1225_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_3_fu_1215_p4(i) = '1' then
                tmp_8_3_fu_1225_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    tmp_8_fu_1092_p3_proc : process(p_Result_1_fu_1082_p4)
    begin
        tmp_8_fu_1092_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_1_fu_1082_p4(i) = '1' then
                tmp_8_fu_1092_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_fu_354_p4 <= addr_fu_346_p3(10 downto 7);
    
    tmp_s_fu_503_p3_proc : process(sext_ln1204_fu_499_p1)
    begin
        tmp_s_fu_503_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if sext_ln1204_fu_499_p1(i) = '1' then
                tmp_s_fu_503_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln628_fu_369_p1 <= addr_fu_346_p3(7 - 1 downto 0);
    ush_fu_725_p3 <= 
        sub_ln1512_fu_719_p2 when (isNeg_reg_1580(0) = '1') else 
        sext_ln1535_fu_716_p1;
    xor_ln1027_fu_440_p2 <= (closepath_reg_1497_pp0_iter7_reg xor ap_const_lv1_1);
    xor_ln271_fu_590_p2 <= (tmp_3_fu_568_p10 xor ap_const_lv1_1);
    xor_ln29_fu_790_p2 <= (do_cos_read_reg_1477_pp0_iter13_reg xor ap_const_lv1_1);
    xor_ln300_fu_1432_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_1428_p2);
    xor_ln311_fu_704_p2 <= (icmp_ln1019_2_fu_699_p2 xor ap_const_lv1_1);
    xor_ln453_fu_1250_p2 <= (icmp_ln453_1_reg_1880 xor ap_const_lv1_1);
    zext_ln1271_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_reg_1625),98));
    zext_ln1347_1_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_4_reg_1783),64));
    zext_ln1347_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_reg_1788),64));
    zext_ln1454_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1561),124));
    zext_ln1488_1_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_1092_p3),63));
    zext_ln1488_2_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_1_fu_1138_p3),63));
    zext_ln1488_3_fu_1237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_2_reg_1856),63));
    zext_ln1488_4_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_3_reg_1897),63));
    zext_ln1488_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_732_p1),63));
    zext_ln541_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_16_fu_800_p3),64));
    zext_ln668_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_354_p4),64));
    zext_ln818_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1665),98));
    zext_ln841_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1561),11));
    zext_ln930_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln628_reg_1514_pp0_iter1_reg),256));
end behav;
